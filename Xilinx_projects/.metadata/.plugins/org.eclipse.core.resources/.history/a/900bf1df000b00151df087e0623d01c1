/*
 * flashSequence.c
 *
 *  Created on: Jun 4, 2015
 *      Author: tcowley0
 */

#include "flashSequence.h"

//The flag that shows whether we are enabled or not
bool flashSequence_enable_flag = false;

//The flag that shows whether we have completed the flash sequence
bool flashSequence_completed_flag = false;

// Turns on the state machine. Part of the interlock.
void flashSequence_enable(){
	flashSequence_enable_flag = true;	//enable = true the flag!
}

// Turns off the state machine. Part of the interlock.
void flashSequence_disable(){
	flashSequence_enable_flag = false;	//disable = false the flag!
}

// Other state machines can call this to determine if this state machine is finished.
bool flashSequence_completed(){
	return flashSequence_completed_flag;	//so we return the flag.
}

// Standard tick function.
void flashSequence_tick(){
	//Stores the current state of the state machine
	static flashSequence_st_t currentState = init_st;

	//This is the timer to delay for displaying/blanking the squares
	static int16_t delay_timer = 0;


	//first we do the state actions
	switch(currentState){
	case init_st:				//Init anything (like the screen)
		break;
	case wait_for_enable:		//we can't do anything unless enabled
		break;
	case display_current_square:	//flash the current square of the sequence
		break;
	case blank:					//a blank in between every flash
		break;
	case end_flash_sequence:		//we have ended the flash sequence
		break;
	case wait_for_disable:		//chill here until disabled
		break;
	default:						//this is an error
		printf("Invalid state!");
		break;
	}


	//and lastly we do the state change
	switch(currentState){
	case init_st:					//Init anything (like the screen)
		currentState = wait_for_enable;		//chill in init only one tick
		break;
	case wait_for_enable:			//we can't do anything unless enabled
		if(flashSequence_enable_flag){
			currentState = display_current_square;
		}
		break;
	case display_current_square:	//flash the current square of the sequence
		break;
	case blank:						//a blank in between every flash
		break;
	case end_flash_sequence:		//we have ended the flash sequence
		currentState = wait_for_disable;	//we do our things, then wait for disable
		break;
	case wait_for_disable:			//chill here until disabled
		if(!flashSequence_enable_flag){
			currentState = init_st;
		}
		break;
	default:						//this is an error
		printf("Invalid state!");
		break;
	}

}




// This will set the sequence to a simple sequential pattern.
// It starts by flashing the first color, and then increments the index and flashes the first
// two colors and so forth. Along the way it prints info messages to the LCD screen.
#define TEST_SEQUENCE_LENGTH 8	// Just use a short test sequence.
uint8_t flashSequence_testSequence[TEST_SEQUENCE_LENGTH] = {SIMON_DISPLAY_REGION_0,
							    SIMON_DISPLAY_REGION_1,
							    SIMON_DISPLAY_REGION_2,
							    SIMON_DISPLAY_REGION_3,
							    SIMON_DISPLAY_REGION_3,
							    SIMON_DISPLAY_REGION_2,
							    SIMON_DISPLAY_REGION_1,
							    SIMON_DISPLAY_REGION_0};
#define INCREMENTING_SEQUENCE_MESSAGE1 "Incrementing Sequence"	// Info message.
#define RUN_TEST_COMPLETE_MESSAGE "Runtest() Complete"		// Info message.
#define MESSAGE_TEXT_SIZE 2	                                // Make the text easy to see.

// Print the incrementing sequence message.
void flashSequence_printIncrementingMessage() {
  display_fillScreen(DISPLAY_BLACK);// Otherwise, tell the user that you are incrementing the sequence.
  display_setCursor(0, display_height()/2);	    // Roughly centered.
  display_println(INCREMENTING_SEQUENCE_MESSAGE1);  // Print the message.
  utils_msDelay(2000);                              // Hold on for 2 seconds.
  display_fillScreen(DISPLAY_BLACK);		    // Clear the screen.
}

void flashSequence_runTest() {
  display_init();	// We are using the display.
  display_fillScreen(DISPLAY_BLACK);	// Clear the display.
  globals_setSequence(flashSequence_testSequence, TEST_SEQUENCE_LENGTH);	// Set the sequence.
  flashSequence_enable();			        // Enable the flashSequence state machine.
  int16_t sequenceLength = 1;	                        // Start out with a sequence of length 1.
  globals_setSequenceIterationLength(sequenceLength);	// Set the iteration length.
  display_setTextSize(MESSAGE_TEXT_SIZE);	        // Use a standard text size.
  while (1) {	                // Run forever unless you break.
    flashSequence_tick();	// tick the state machine.
    utils_msDelay(1);	// Provide a 1 ms delay.
    if (flashSequence_completed()) {  // When you are done flashing the sequence.
      flashSequence_disable();  // Interlock by first disabling the state machine.
      flashSequence_tick();	// tick is necessary to advance the state.
      utils_msDelay(1);		// don't really need this here, just for completeness.
      flashSequence_enable();	// Finish the interlock by enabling the state machine.
      utils_msDelay(1);	// Wait 1 ms for no good reason.
      sequenceLength++;	// Increment the length of the sequence.
      if (sequenceLength > TEST_SEQUENCE_LENGTH) // Stop if you have done the full sequence.
        break;
      flashSequence_printIncrementingMessage();  // Tell the user that you are going to the next step in the pattern.
      globals_setSequenceIterationLength(sequenceLength);	// Set the length of the pattern.
    }
  }
  // Let the user know that you are finished.
  display_fillScreen(DISPLAY_BLACK);
  display_setCursor(0, display_height()/2);
  display_println(RUN_TEST_COMPLETE_MESSAGE);
}
